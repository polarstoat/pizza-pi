{"version":3,"sources":["serviceWorker.js","NumberInput.js","Pizza.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","NumberInput","props","handleChange","bind","event","this","onChange","target","valueAsNumber","FormControl","type","inputMode","value","Component","Pizza","state","diameter","undefined","price","handleDiameterChange","handlePriceChange","setState","radius","Math","PI","pow","lowerCaseName","name","toLowerCase","area","getArea","Form","Row","Group","as","Col","controlId","Label","InputGroup","Append","Text","Prepend","Control","readOnly","toFixed","App","Container","className","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1cc97d97.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\n\nimport FormControl from 'react-bootstrap/FormControl';\n\nclass NumberInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.valueAsNumber);\n  }\n\n  render() {\n    return (\n      <FormControl type=\"number\" inputMode=\"decimal\" value={this.props.value} onChange={this.handleChange} />\n    );\n  }\n}\n\nexport default NumberInput;\n","import React, { Component } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport NumberInput from './NumberInput.js';\n\nclass Pizza extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      diameter: undefined,\n      price: undefined,\n    };\n\n    this.handleDiameterChange = this.handleDiameterChange.bind(this);\n    this.handlePriceChange = this.handlePriceChange.bind(this);\n  }\n\n  handleDiameterChange(diameter) {\n    this.setState({diameter})\n  }\n\n  handlePriceChange(price) {\n    this.setState({price});\n  }\n\n  getArea() {\n    const radius = this.state.diameter / 2;\n    const area = Math.PI * Math.pow(radius, 2)\n\n    return area;\n  }\n\n  render() {\n    const lowerCaseName = this.props.name.toLowerCase();\n\n    const area = this.getArea();\n\n    return (\n      <Form>\n        <h5>{this.props.name} pizza</h5>\n        <Form.Row>\n          <Form.Group as={Col} controlId={`${lowerCaseName}-pizza-diameter`}>\n            <Form.Label>Diameter</Form.Label>\n            <InputGroup>\n              <NumberInput value={this.state.diameter} onChange={this.handleDiameterChange} />\n              <InputGroup.Append>\n                <InputGroup.Text>in</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form.Group>\n          <Form.Group as={Col} controlId={`${lowerCaseName}-pizza-price`}>\n            <Form.Label>Price</Form.Label>\n            <InputGroup>\n              <InputGroup.Prepend>\n                <InputGroup.Text>£</InputGroup.Text>\n              </InputGroup.Prepend>\n              <NumberInput value={this.state.price} onChange={this.handlePriceChange} />\n            </InputGroup>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId={`${lowerCaseName}-pizza-area`}>\n            <Form.Label>Area</Form.Label>\n            <InputGroup>\n              <Form.Control type=\"text\" readOnly={true} value={this.state.diameter && area.toFixed(2)} />\n              <InputGroup.Append>\n                <InputGroup.Text>sq. in</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form.Group>\n          <Form.Group as={Col} controlId={`${lowerCaseName}-pizza-cost-per-area`}>\n            <Form.Label>Cost per sq. in</Form.Label>\n            <InputGroup>\n              <InputGroup.Prepend>\n                <InputGroup.Text>£</InputGroup.Text>\n              </InputGroup.Prepend>\n              <Form.Control type=\"text\" readOnly={true} value={this.state.diameter && this.state.price && (this.state.price / area).toFixed(4)} />\n            </InputGroup>\n          </Form.Group>\n        </Form.Row>\n      </Form>\n    );\n  }\n}\n\nexport default Pizza;\n","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\nimport Pizza from './Pizza.js';\n\nfunction App() {\n  return (\n    <Container className=\"my-3\">\n      <Pizza name=\"Smaller\" />\n      <Pizza name=\"Larger\" />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}